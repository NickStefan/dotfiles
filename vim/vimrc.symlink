set nocompatible        " Must be first line

" The next three lines ensure that the ~/.vim/bundle/ system works
filetype on
filetype off
set rtp+=~/.vim/bundle/vundle
call vundle#rc()

" Load bundles
  " DEPS
  Bundle 'gmarik/vundle'
  Bundle 'MarcWeber/vim-addon-mw-utils'
  Bundle 'tomtom/tlib_vim'

  " General
  Bundle 'altercation/vim-colors-solarized'
  Bundle 'spf13/vim-colors'
  Bundle 'kien/ctrlp.vim'
  Bundle 'Raimondi/delimitMate'
  Bundle 'Lokaltog/powerline'
  Bundle 'flazz/vim-colorschemes'
  Bundle 'moll/vim-bbye'

  " General Programming
  Bundle "pangloss/vim-javascript"
  Bundle 'mxw/vim-jsx'
  Bundle 'scrooloose/syntastic'
  Bundle 'scrooloose/nerdtree'
  Bundle 'tpope/vim-fugitive'
  Bundle 'fatih/vim-go'
  Bundle 'terryma/vim-multiple-cursors'
  Bundle 'scrooloose/nerdcommenter'

" General

  set background=light        " Assume a light background
  filetype plugin indent on   " Automatically detect file types.
  syntax on                   " Syntax highlighting
  set mouse=a                 " Automatically enable mouse usage
  set mousehide               " Hide the mouse cursor while typing
  set nobackup
  set nowritebackup
  set noswapfile
  scriptencoding utf-8
  " this would make any ! scripts run in the directory of the buffer
  "autocmd BufEnter * if bufname("") !~ "^\[A-Za-z0-9\]*://" | lcd %:p:h | endif " Always switch to the current file directory 

  set shortmess+=filmnrxoOtT          " Abbrev. of messages (avoids 'hit enter')
  set viewoptions=folds,options,cursor,unix,slash " Better Unix / Windows compatibility
  set virtualedit=onemore             " Allow for cursor beyond last character
  set history=1000                    " Store a ton of history (default is 20)
  set spell                           " Spell checking on
  set hidden                          " Allow buffer switching without saving

  "Override eslint with local version where necessary.
  let local_eslint = finddir('node_modules', '.;') . '/.bin/eslint'
  if matchstr(local_eslint, "^\/\\w") == ''
    let local_eslint = getcwd() . "/" . local_eslint
  endif
  if executable(local_eslint)
    let g:syntastic_javascript_eslint_exec = local_eslint
  endif

  set statusline+=%#warningmsg#
  set statusline+=%{SyntasticStatuslineFlag()}
  set statusline+=%*

  let g:syntastic_javascript_checkers = ['eslint']
  let g:jsx_ext_required = 0 " Allow JSX in normal JS files"
  let g:syntastic_always_populate_loc_list = 1
  let g:syntastic_auto_loc_list = 1
  let g:syntastic_check_on_open = 0
  let g:syntastic_check_on_wq = 0
  let g:syntastic_go_checkers = ['go']
" }

" Mappings {
  
  let mapleader = "\<space>"
  map! jj <ESC>
  
  map <leader>m :NERDTreeToggle<CR>
  " jump back to nerdtree
  map <leader>n :NERDTree<CR>
  " reveal in side bar
  map <leader>t :NERDTreeFind<CR>
  
  noremap <leader>a :w<CR>

  " global find template
  map <leader>f <C-p>
  map <leader>F :grep -R BrandList `find packages/ -type f -name "*.js"`

  map <leader>v <C-w>v
  map <leader>b <C-w>s

  " move between panes
  map <leader>h <C-w>h
  map <leader>j <C-w>j
  map <leader>k <C-w>k
  map <leader>l <C-w>l
  
  " buffers
  nmap <leader>r :checktime<CR>
  map <leader>c :Bdelete<CR>
  map <leader>s :bprevious<CR>
  map <leader>d :bnext<CR>
" }

" Multiple Cursors {
  let g:multi_cursor_next_key='<C-n>'
  let g:multi_cursor_prev_key='<C-p>'
  let g:multi_cursor_skip_key='<C-x>'
  let g:multi_cursor_quit_key='<Esc>'
  
" }

" Vim UI {

  if filereadable(expand("~/.vim/bundle/vim-colors-solarized/colors/solarized.vim"))
    let g:solarized_termcolors=256
    color solarized                 " Load a colorscheme
  endif

  let g:solarized_termtrans=1
  let g:solarized_contrast="high"
  let g:solarized_visibility="high"

  "let g:hybrid_use_iTerm_colors = 1
  "colorscheme monokai

  set tabpagemax=15               " Only show 15 tabs
  set showmode                    " Display the current mode

  set cursorline                  " Highlight current line

  highlight clear SignColumn      " SignColumn should match background for
                                  " things like vim-gitgutter

  if has('cmdline_info')
    set ruler                   " Show the ruler
    set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%) " A ruler on steroids
    set showcmd                 " Show partial commands in status line and
                                    " Selected characters/lines in visual mode
  endif

  if has('statusline')
    set laststatus=2

    " Broken down into easily includeable segments
    set statusline=%<%f\                     " Filename
    set statusline+=%w%h%m%r                 " Options
    set statusline+=%{fugitive#statusline()} " Git Hotness
    set statusline+=\ [%{&ff}/%Y]            " Filetype
    set statusline+=\ [%{getcwd()}]          " Current dir
    set statusline+=%=%-14.(%l,%c%V%)\ %p%%  " Right aligned file nav info
  endif

  set backspace=indent,eol,start  " Backspace for dummies
  set linespace=0                 " No extra spaces between rows
  set nu                          " Line numbers on
  set showmatch                   " Show matching brackets/parenthesis
  set incsearch                   " Find as you type search
  set hlsearch                    " Highlight search terms
  set winminheight=0              " Windows can be 0 line high
  set ignorecase                  " Case insensitive search
  set smartcase                   " Case sensitive when uc present
  set wildmenu                    " Show list instead of just completing
  set wildmode=list:longest,full  " Command <Tab> completion, list matches, then longest common part, then all.
  set whichwrap=b,s,h,l,<,>,[,]   " Backspace and cursor keys wrap too
  set scrolljump=5                " Lines to scroll when cursor leaves screen
  set scrolloff=3                 " Minimum lines to keep above and below cursor
  set foldenable                  " Auto fold code
  " dont highlight tabs in golang files
  set nolist

  " List chars
  set listchars=""          " Reset the listchars
  set listchars=tab:\ \     " a tab should display as "  ", trailing whitespace as "."
  set listchars+=trail:.    " show trailing spaces as dots
  set listchars+=extends:>  " The character to show in the last column when wrap is
                            " off and the line continues beyond the right of the screen
  set listchars+=precedes:< " The character to show in the last column when wrap is
                            " off and the line continues beyond the right of the screen

  " Fix for tmux background color easing
  set t_ut=

" }

" Formatting {

  set nowrap                      " Wrap long lines
  set autoindent                  " Indent at the same level of the previous line
  set expandtab                   " Tabs are spaces, not tabs
  
  " 1 tab == 4 spaces
  set shiftwidth=4
  set tabstop=4
  set softtabstop=4               " Let backspace delete indent
  
  "set matchpairs+=<:>             " Match, to be used with %
  set comments=sl:/*,mb:*,elx:*/  " auto format comment blocks

" }

"-------------------------------------------------------------------------------
" Plugin Settings
"-------------------------------------------------------------------------------
" delimitMat
let delimitMate_quotes = "\" \'"
let delimitMate_smart_quotes = 0

" Powerline
let g:Powerline_symbols='fancy'
" CtrlP
let g:ctrlp_switch_buffer = 0
let g:ctrlp_working_path_mode = 'r'
nnoremap <silent> <D-t> :CtrlP<CR>
nnoremap <silent> <D-r> :CtrlPMRU<CR>
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\.git$\|\.hg$\|\.svn$',
  \ 'file': '\.exe$\|\.so$\|\.dll$'
\ }
let g:ctrlp_user_command = {
  \ 'types': {
    \ 1: ['.git', 'cd %s && git ls-files . --cached --exclude-standard --others'],
    \ 2: ['.hg', 'hg --cwd %s locate -I .'],
  \ },
  \ 'fallback': 'find %s -type f'
\ }




" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500


